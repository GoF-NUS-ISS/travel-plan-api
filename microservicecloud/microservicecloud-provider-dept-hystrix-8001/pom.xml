
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.gof.springcloud</groupId>
		<artifactId>microservicecloud</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>

	<artifactId>microservicecloud-provider-dept-hystrix-8001</artifactId>

	<properties>
		<version.number>${git.commit.time}.${git.commit.id.abbrev}</version.number>
	</properties>

	<dependencies>
		<!-- hystrix -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
		</dependency>
		<!-- register provider into eureka -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>

		<!--Mongo-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-mongodb</artifactId>
		</dependency>

        <!-- redis -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
		<dependency>
		    <groupId>org.apache.commons</groupId>
		    <artifactId>commons-pool2</artifactId>
		</dependency>
        <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
        </dependency>

		<!--Lombok-->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>

		<dependency>
		    <groupId>io.springfox</groupId>
		    <artifactId>springfox-boot-starter</artifactId>
		</dependency>

		<dependency>
			<groupId>com.gof.springcloud</groupId>
			<artifactId>microservicecloud-api</artifactId>
			<version>${project.version}</version>
		</dependency>	    	
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>
		<!-- actuator monitoring-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid</artifactId>
		</dependency>
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>

		<dependency>
		    <groupId>ch.qos.logback</groupId>
		    <artifactId>logback-classic</artifactId>
		</dependency>
		<dependency>
		    <groupId>ch.qos.logback</groupId>
		    <artifactId>logback-core</artifactId>
		</dependency>
		<dependency>
		    <groupId>ch.qos.logback</groupId>
		    <artifactId>logback-access</artifactId>
		</dependency>
		<dependency>
		    <groupId>net.logstash.log4j</groupId>
		    <artifactId>jsonevent-layout</artifactId>
		</dependency>
		<dependency>
		    <groupId>net.logstash.logback</groupId>
		    <artifactId>logstash-logback-encoder</artifactId>
		</dependency>		

		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jetty</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>springloaded</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>
	</dependencies>

	<profiles>
		<profile>
			<id>staging</id>

			<build>
				<plugins>
					<!--Added by Akash-plugin: git-commit-id-plugin
                                   Using this plugin to get the commit id and that id can be used
                                   as tag for our docker images.
                                   Used recommendation from this link:
                                   https://phauer.com/2016/version-numbers-continuous-delivery-maven-docker/
                                   https://dzone.com/articles/maven-git-commit-id-plugin
                                   -->
					<plugin>
						<groupId>pl.project13.maven</groupId>
						<artifactId>git-commit-id-plugin</artifactId>
						<version>2.2.4</version>
						<executions>
							<execution>
								<phase>validate</phase>
								<goals>
									<goal>revision</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<dateFormat>yyyyMMdd-HHmmss</dateFormat><!--  human-readable part of the version number -->
							<dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
							<generateGitPropertiesFile>true</generateGitPropertiesFile>
							<generateGitPropertiesFilename>${project.basedir}/git.properties</generateGitPropertiesFilename>
							<format>json</format>
							<injectAllReactorProjects>true</injectAllReactorProjects>
						</configuration>
					</plugin>
					<!--Add by Akash: using this plugin to write version number to a text file
                    so that jenkins pipeline can use it-->
					<plugin>
						<groupId>ru.yaal.maven</groupId>
						<artifactId>write-text-files-maven-plugin</artifactId>
						<version>1.1</version>
						<configuration>
							<charset>UTF-8</charset>
							<files>
								<file>
									<path>.././.env</path>
									<lines>
										<line>api_tag=${version.number}</line>
									</lines>
								</file>
							</files>
						</configuration>
						<executions>
							<execution>
								<id>write-text-files</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>write-text-files</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>com.google.cloud.tools</groupId>
						<artifactId>jib-maven-plugin</artifactId>
						<configuration>
							<from>
								<image>java:8</image>
							</from>
							<to>
								<image>docker.io/gofnusiss/travel-plan-api:${version.number}</image>
							</to>
							<container>
								<jvmFlags>
									<jvmFlag>-Xms256m</jvmFlag>
									<jvmFlag>-Xmx512m</jvmFlag>
								</jvmFlags>
								<ports>
									<port>8001</port>
								</ports>
							</container>
							<allowInsecureRegistries>true</allowInsecureRegistries>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<!-- 
			<plugin>
			  <groupId>com.spotify</groupId>
			  <artifactId>dockerfile-maven-plugin</artifactId>
			  <version>1.4.13</version>
			  <executions>
			    <execution>
			      <id>default</id>
			      <goals>
			        <goal>build</goal>
			        <goal>push</goal>
			      </goals>
			    </execution>
			  </executions>
			  <configuration>
			    <repository>gofnusiss/travel-plan-api</repository>
			    <tag>latest</tag>
				<username>236924</username>
				<password>5201314sunshun</password>
			    <buildArgs>
			      <JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
			    </buildArgs>
			  </configuration>
			</plugin>
			 -->
		</plugins>
	</build>

</project>
 

